# -*- coding: utf-8 -*-
"""bigdataproject_20192740_jidaewoong.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f4cGn9B-oNYkVBnQUjf3ywPINFEcc8Ph
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from matplotlib import rc

"""**데이터 설명**"""

df = pd.read_csv('한국전력공사_서울시 전기차충전소 충전량.csv', encoding= 'utf-8')
df

"""**전처리 과정**"""

df.info()

"""결측치 처리, 날짜열 변환"""

df['충전기용량'].value_counts(dropna=False)/len(df)

fill_values = { '급속': 50, '완속': 7 }
fill_func = lambda g : g.fillna(fill_values[g.name])
df= df.groupby('충전구분').apply(fill_func)

df.isnull().sum()

"""**주소열 이상치 대체**"""

df['주소'].value_counts()
df = df.replace('서울특별시 null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null', np.nan)

df[df['주소'].isnull()]['충전소명'].value_counts()

#인터넷에서 주소를 찾아 넣습니다
for i,j in enumerate(df['충전소명']) :
  if j == '동대문디자인플라자' :
    df['주소'][i] = '서울특별시 중구 을지로 281'
  elif j == '방배롯데캐슬아르떼' :
    df['주소'][i] = '서울특별시 서초구 방배천로18길 11'
  elif j == '국립현대미술관 서울관' :
    df['주소'][i] = '서울특별시 종로구 삼청로 30'
  elif j == '양재리본타워2단지아파트' :
    df['주소'][i] = '서울특별시 서초구 양재동 212'

df['주소'].isnull().sum()

"""지오코드 활용"""

lat = pd.read_csv('ad.csv')

lat = lat[lat['주소'].str.split().str[0]!='경기도']
lat = lat.drop(0)
lat

"""**서울시 구 열 생성**"""

df['주소']= df['주소'].str.replace('서울특별시 ','')
df.insert(3, '주소_구', df['주소'].str.split().str[0])
df.head()

"""**충전량, 충전시간 이상치 처리**"""

df.groupby('충전구분').describe().T

slow = df[df['충전구분']=='완속']
slow['충전량'].clip(0,25.81,inplace=True)
slow['충전시간'].clip(0,5,inplace=True)
fast = df[df['충전구분']=='급속']
fast['충전시간'].clip(0,1,inplace = True)

df = pd.concat([fast,slow]).reset_index(drop=True) ;df

"""**총 충전시간 열 생성**"""

df.insert(6, '총충전시간', ((df['충전시간']*60) + df['충전분'])/60)

df['총충전시간'] = round(df['총충전시간'],2) ;df

!pip install streamlit

!pip install pyngrok

"""**홈페이지 제작**

"""

df.to_csv('data')
df.to_csv('data.csv', index=False)

# Read DataFrame from CSV
df = pd.read_csv('data.csv', encoding='utf-8-sig')

# Display DataFrame information before conversion
st.write("DataFrame info before conversion:")
st.write(df.info())

# Change start time and end time to datetime
df['충전시작시각'] = pd.to_datetime(df['충전시작시각'], format='%Y-%m-%d %H:%M:%S', errors='coerce')
df['충전종료시각'] = pd.to_datetime(df['충전종료시각'], format='%Y-%m-%d %H:%M:%S', errors='coerce')

# Display DataFrame information after conversion
st.write("\nDataFrame info after conversion:")
st.write(df.info())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from datetime import date

df['year'] = df['충전시작시각'].dt.year
c = df['year'] == 2021

df_simple = df.loc[c,:]

#month week weekday 열 만들어주기

df_simple['month'] = df_simple['충전시작시각'].dt.month
df_simple['week'] = (np.floor( (df_simple['충전시작시각'].dt.dayofyear) / 7 ))
df_simple['week'].astype('int')
df_simple['day'] = df_simple['충전시작시각'].dt.dayofyear

df_simple.head()

df_simple = df_simple.rename(columns={'Latitude':'lat','Longitude':'lon'})

#홈페이지 이름 정하기
st.set_page_config(page_title = 'Streamlit Homepage', page_icon = '🚗',
                      layout = 'wide')

#타이틀 적어주기
st.title('Data App Dashboard')

#새로고침 버튼 만들기
if st.button('새로고침'):
    st.experimental_rerun()

st.sidebar.title("조건 필터")
st.sidebar.header("날짜 조건")
col1, col2 = st.sidebar.columns(2)
with col1:
    start_date = st.date_input("시작일시", date(2021, 1, 1),
                                       min_value=date(2021,1,1),
                                       max_value=date(2021,12,31))
with col2:
    end_date = st.date_input("종료일시", date(2021, 12, 31),
                                     min_value=date(2021,1,1),
                                     max_value=date(2021,12,31))
df_simple = df_simple[df_simple['충전시작시각'].dt.date.between(start_date, end_date)]


st.sidebar.header('충전기')
option01 = st.sidebar.multiselect('충전구분', (df_simple.충전구분.unique()), default=(df_simple.충전구분.unique()))
df_simple = df_simple[df_simple.충전구분.isin(option01)]
option02 = st.sidebar.multiselect('충전기용량', (df_simple.충전기용량.unique()), default=(df_simple.충전기용량.unique()))
df_simple = df_simple[df_simple.충전기용량.isin(option02)]

st.sidebar.header('지역구 선택')
option03 = st.sidebar.multiselect('지역구', (df_simple.주소_구.unique()), default=(df.주소_구.unique()))
df_simple= df_simple[df_simple.주소_구.isin(option03)]

st.sidebar.header('충전시간')
option04 = st.sidebar.slider('충전시간',0.0,6.0,(0.0,6.0))

df_simple = df_simple[(option04[1] >= df_simple.총충전시간) & (option04[0] <= df_simple.총충전시간) ]

df_simple

#header 만들기 Overview
st.header('0. Overview')
col1, col2 = st.columns(2)
col1.metric(label = "평균 충전량", value = round(df_simple['충전량'].mean() ,2))
col2.metric(label = "평균 충전시간", value = round(df_simple['총충전시간'].mean() ,2))

st.header('1. 충전량 분석')

st.subheader('전체')

time_frame = st.selectbox("월 단위/주 단위/일 단위", ("month", "week","day"))

whole_values = df_simple.groupby(time_frame)[['충전량']].sum()

st.download_button('Download',whole_values.to_csv(encoding='euc-kr'), '충전량 분석.csv')

st.area_chart(whole_values, use_container_width=True)

st.subheader('지역별 비교')


city_range = st.radio(label="범위선택", options=("구단위", ""), index=0)


if city_range=='구단위':
    city_range='주소_구'
    small_region = st.multiselect("구선택", (df_simple.주소_구.unique()), (df_simple.주소_구.unique()))
    city_values = df_simple[df_simple['주소_구'].isin(small_region)]


    city_values = pd.pivot_table(city_values, index=time_frame, columns=city_range,
                             values='충전량', aggfunc='sum',fill_value=0)
    city_values.index.name = None
    city_values.columns = list(city_values.columns)

    st.line_chart(city_values, use_container_width=True)

st.subheader('Top5 비교')

def top5(col_name, top=5):
    my_agg = (df_simple.groupby(col_name)['충전량'].sum()).reset_index().sort_values('충전량', ascending=False).head(top)
    my_agg[col_name] = my_agg[col_name].astype('str')
    fig = plt.figure(figsize=(15,10))
    ax = sns.barplot(x='충전량', y=col_name, data=my_agg)
    #ax.bar_label(ax.containers[0], label_type='center', color='white')
    return fig

col1, col2 = st.columns(2)
with col1:
    st.write('Top5 충전량')
    st.pyplot(top5('주소_구'))
with col2:
    st.write('Top5 충전량')
    st.pyplot(top5('충전소명'))

st.header('2. 충전시간분석')

st.subheader('전체')

time_frame2 = st.selectbox("월단위/주단위/일단위", ("month", "week","day"))

whole_values2 = df_simple.groupby(time_frame2)[['총충전시간']].mean()

st.download_button('Download',whole_values2.to_csv(encoding='euc-kr'), '총충전시간 분석.csv')

st.area_chart(whole_values2, use_container_width=True)

st.subheader('지역별 비교')


city_range = st.radio(label="범위선택", options=("구 단위", " "), index=0)


if city_range=='구단위':
    city_range='주소_구'
    small_region = st.multiselect("구선택", (df_simple.주소_구.unique()), (df_simple.주소_구.unique()))
    city_values = df_simple[df_simple['주소_구'].isin(small_region)]


    city_values = pd.pivot_table(city_values, index=time_frame2, columns=city_range,
                             values='총충전시간', aggfunc='mean',fill_value=0)
    city_values.index.name = None
    city_values.columns = list(city_values.columns)

    st.line_chart(city_values, use_container_width=True)

st.subheader('Top5 비교')

def top5(col_name, top=5):
    my_agg = (df_simple.groupby(col_name)['총충전시간'].mean()).reset_index().sort_values('총충전시간', ascending=False).head(top)
    my_agg[col_name] = my_agg[col_name].astype('str')
    fig = plt.figure(figsize=(15,10))
    ax = sns.barplot(x='총충전시간', y=col_name, data=my_agg)
    #ax.bar_label(ax.containers[0], label_type='center', color='white')
    return fig

col1, col2 = st.columns(2)
with col1:
    st.write('Top5 충전시간')
    st.pyplot(top5('주소_구'))
with col2:
    st.write('Top5 충전시간')
    st.pyplot(top5('충전소명'))


# In[18]:


st.subheader('지역별분포')

jit = np.random.randn(len(df_simple), 2)
jit_ratio = 0.001
df_simple['lat'] = df_simple.get('lat', 0) + jit[:, 0] * jit_ratio
df_simple['lon'] = df_simple.get('lon', 0) + jit[:, 1] * jit_ratio
st.map(df_simple)

